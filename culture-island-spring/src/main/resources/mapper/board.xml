<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.cultureisland.board.model.BoardMapper">
    <resultMap type="boardDto" id="article">
        <result column="id" property="articleNo"/>
        <result column="member_id" property="memberId"/>
        <result column="name" property="name"/>
        <result column="subject" property="subject"/>
        <result column="content" property="content"/>
        <result column="hit" property="hit"/>
        <result column="type" property="type"/>
        <result column="pay" property="pay"/>
        <result column="register_time" property="registerTime"/>
    </resultMap>

    <resultMap type="boardDto" id="viewArticle" extends="article">
        <collection property="fileInfos" column="id" javaType="list" ofType="fileInfoDto" select="fileInfoList"/>
    </resultMap>

    <resultMap type="fileInfoDto" id="file">
        <result column="save_folder" property="saveFolder"/>
        <result column="original_file" property="originalFile"/>
        <result column="save_file" property="saveFile"/>
    </resultMap>

    <sql id="search">
        <if test="word != null and word != ''">
            <if test="key == 'subject'">
                and subject like concat('%', #{word}, '%')
            </if>
            <if test="key != 'subject'">
                and ${key} = #{word}
            </if>
        </if>
        <if test="type != null and type != ''">
            and type like concat('%', #{type}, '%')
        </if>
        <if test="pay != null">
            and pay = #{pay}
        </if>
    </sql>

    <select id="listArticle" parameterType="map" resultMap="article">
        select a.id, a.member_id, a.subject, a.content, a.hit, a.register_time, a.type, a.pay, a.name
        from article a, member m
        where a.member_id = m.id
        <include refid="search"></include>
        order by a.register_time desc
        limit #{start}, #{listSize}
    </select>

    <select id="getTotalArticleCount" parameterType="map" resultType="int">
        select count(id)
        from article
        <where>
            <include refid="search"></include>
        </where>
    </select>

    <select id="memberListArticle" parameterType="map" resultType="BoardDto" resultMap="article">
        SELECT * FROM article
        WHERE subject LIKE CONCAT('%', #{word}, '%')
        <if test="memberId != null">
            AND member_id = #{memberId}
        </if>
        LIMIT #{start}, #{listSize}
    </select>

    <select id="getMemberTotalArticleCount" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM article
        WHERE subject LIKE CONCAT('%', #{word}, '%')
        <if test="memberId != null">
            AND member_id = #{memberId}
        </if>
    </select>


    <insert id="writeArticle" parameterType="boardDto">
        insert into article (member_id, name, subject, content, hit, type, pay, register_time)
        values (#{memberId}, #{name}, #{subject}, #{content}, 0, #{type}, #{pay}, now())
        <selectKey resultType="int" keyProperty="articleNo" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>

    <insert id="registerFile" parameterType="boardDto">
        insert into file (article_id, save_folder, original_file, save_file)
        values
        <foreach collection="fileInfos" item="fileinfo" separator=" , ">
            (#{articleNo}, #{fileinfo.saveFolder}, #{fileinfo.originalFile}, #{fileinfo.saveFile})
        </foreach>
    </insert>

    <select id="getArticle" parameterType="int" resultMap="article">
        select id, member_id, name, subject, content, hit, register_time
        from article
        where id = #{articleNo}
    </select>

    <update id="updateHit" parameterType="int">
        update article
        set hit = hit + 1
        where id = #{articleNo}
    </update>

    <update id="modifyArticle" parameterType="boardDto">
        update article
        set subject = #{subject}, content = #{content}, pay = #{pay}, type = #{type}
        where id = #{articleNo}
    </update>

    <delete id="deleteArticle" parameterType="int">
        delete from article
        where id = #{articleNo}
    </delete>

</mapper>
